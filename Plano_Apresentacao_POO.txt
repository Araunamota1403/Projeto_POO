====================================================================
           PLANO DE APRESENTA√á√ÉO - PROJETO SPC API 
                   Programa√ß√£o Orientada a Objetos
                        Tempo Total: 15 minutos
====================================================================

üìå OBJETIVO: Demonstrar como nossa API Spring Boot aplicou os conceitos de POO

====================================================================
                          DIVIS√ÉO POR MEMBROS
====================================================================

üë§ MEMBRO 1 - INTRODU√á√ÉO E VIS√ÉO GERAL (3-4 minutos)
--------------------------------------------------------------------
üéØ Responsabilidades:
- Apresentar o projeto: "API SPC para consulta de dispositivos"
- Explicar o que faz: Login de usu√°rios + consulta de dispositivos
- Mostrar a estrutura de pastas do projeto
- Demonstrar que funciona: rodar o projeto e mostrar que est√° no ar

üìù Pontos-chave para falar:
‚Ä¢ "Criamos uma API REST usando Spring Boot"
‚Ä¢ "A API simula um sistema de consulta de dispositivos com autentica√ß√£o"
‚Ä¢ "Vamos mostrar como aplicamos os 4 pilares da POO neste projeto"

üõ†Ô∏è O que mostrar:
- Estrutura de pastas no VS Code
- Comando: mvn spring-boot:run
- Browser: http://localhost:8080 (mostrar que est√° rodando)

====================================================================

üë§ MEMBRO 2 - ENCAPSULAMENTO E CLASSES (3-4 minutos)
--------------------------------------------------------------------
üéØ Responsabilidades:
- Explicar ENCAPSULAMENTO no projeto
- Mostrar as classes principais (User, Device, ApiResponse)
- Demonstrar atributos privados e m√©todos p√∫blicos

üìù Pontos-chave para falar:
‚Ä¢ "ENCAPSULAMENTO: escondemos os dados internos das classes"
‚Ä¢ "Usamos private para atributos, public para m√©todos"
‚Ä¢ "Isso protege os dados e controla como s√£o acessados"

üõ†Ô∏è Arquivos para mostrar:
- src/main/java/com/example/spcapi/models/User.java
- src/main/java/com/example/spcapi/models/Device.java
- Destacar: private String email, public String getEmail()

üí° Frase de exemplo:
"A classe User tem email privado, s√≥ podemos acessar via getEmail()"

====================================================================

üë§ MEMBRO 3 - ABSTRA√á√ÉO E HERAN√áA (3-4 minutos)
--------------------------------------------------------------------
üéØ Responsabilidades:
- Explicar ABSTRA√á√ÉO no projeto
- Mostrar como dividimos responsabilidades em camadas
- Explicar HERAN√áA (mesmo que b√°sica, como Exception classes)

üìù Pontos-chave para falar:
‚Ä¢ "ABSTRA√á√ÉO: separamos responsabilidades em diferentes classes"
‚Ä¢ "Controller ‚Üí Service ‚Üí Model (cada um tem sua fun√ß√£o)"
‚Ä¢ "HERAN√áA: nossas exce√ß√µes herdam de RuntimeException"

üõ†Ô∏è Arquivos para mostrar:
- UserController.java (recebe requisi√ß√µes)
- UserService.java (processa l√≥gica)
- InvalidSerialException.java (herda de RuntimeException)

üí° Frase de exemplo:
"Controller cuida da web, Service cuida da l√≥gica, Model guarda dados"

====================================================================

üë§ MEMBRO 4 - POLIMORFISMO E DEMONSTRA√á√ÉO PR√ÅTICA (4-5 minutos)
--------------------------------------------------------------------
üéØ Responsabilidades:
- Explicar POLIMORFISMO no projeto
- Demonstra√ß√£o PR√ÅTICA usando Postman
- Conclus√£o do projeto

üìù Pontos-chave para falar:
‚Ä¢ "POLIMORFISMO: mesmos m√©todos, comportamentos diferentes"
‚Ä¢ "ResponseEntity<String> vs ResponseEntity<DeviceResponseDTO>"
‚Ä¢ "Exceptions s√£o tratadas de forma polim√≥rfica"

üõ†Ô∏è O que mostrar:
- GlobalExceptionHandler.java (trata diferentes exce√ß√µes)
- DEMO PR√ÅTICA no Postman:
  1. Login com credenciais v√°lidas
  2. Buscar dispositivo com token
  3. Buscar sem token (erro)
  4. Serial inv√°lido (erro diferente)

üí° Frase de exemplo:
"Diferentes erros s√£o tratados automaticamente pelo mesmo sistema"

====================================================================
                            DICAS IMPORTANTES
====================================================================

‚è∞ CONTROLE DE TEMPO:
- Cada membro: m√°ximo 4 minutos
- Deixar 1 minuto para perguntas
- Praticar antes para n√£o ultrapassar

üéØ FOCO EM POO:
- SEMPRE conectar o que est√£o mostrando com conceitos de POO
- Usar as palavras: Encapsulamento, Heran√ßa, Polimorfismo, Abstra√ß√£o
- Explicar POR QUE usamos POO (organiza√ß√£o, reutiliza√ß√£o, manuten√ß√£o)

üì± MATERIAL NECESS√ÅRIO:
- Computador com projeto rodando
- Postman instalado e collection importada
- Slides simples (opcional, c√≥digo j√° √© visual)

üîß PREPARA√á√ÉO:
- Todos devem saber rodar: mvn spring-boot:run
- Testar a collection do Postman antes
- Cada membro deve conhecer seu arquivo principal

====================================================================
                          FRASES DE TRANSI√á√ÉO
====================================================================

Membro 1 ‚Üí Membro 2:
"Agora vamos ver como organizamos nosso c√≥digo usando Encapsulamento"

Membro 2 ‚Üí Membro 3:
"Al√©m de encapsular, tamb√©m aplicamos Abstra√ß√£o e Heran√ßa"

Membro 3 ‚Üí Membro 4:
"Para finalizar, vamos ver Polimorfismo e como tudo funciona na pr√°tica"

====================================================================
                             CONCLUS√ÉO FINAL
====================================================================

"Este projeto demonstra que POO n√£o √© s√≥ teoria - usamos os 4 pilares
para criar uma aplica√ß√£o real, organizada e funcional. POO nos ajudou a:
- Organizar melhor o c√≥digo (Encapsulamento)
- Dividir responsabilidades (Abstra√ß√£o) 
- Reutilizar c√≥digo (Heran√ßa)
- Tratar diferentes situa√ß√µes de forma uniforme (Polimorfismo)"

====================================================================
                          POSS√çVEIS PERGUNTAS
====================================================================

P: "Por que usaram Spring Boot?"
R: "√â um framework que j√° implementa muitos padr√µes de POO para n√≥s"

P: "O projeto √© muito simples?"
R: "Sim, mas mostra claramente os conceitos de POO na pr√°tica"

P: "Como validam os dados?"
R: "Usamos classes espec√≠ficas com responsabilidades bem definidas"

====================================================================
